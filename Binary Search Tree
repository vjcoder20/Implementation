BINARY SEARCH TREE VIEW           THUMB RULE: Root ke left mein sab ussey smaller and root ke right mein sab ussey bigger
                  50
               /      \
             /          \
           30            80
         /   \          /   \
       /      \        /      \
     12        37     62       87
    /           \       \        \
   /              \      \         \
  25               40     75        93
           

 public class BinaryTreeSearchConstructor{
 public static class Node{
        int data;                                                               
        Node left;
        Node right;
        
        Node(int data,Node left,Node right){
            this.data = data;
            this.left = left;
            this.right = right;
        }
    }
    
    public static Node add(Node node,int data){
    //Base case
    if(node==null){
    return new Node(data,null,null);
    }
      
      if(data>node.data){
       node.right = add(node.right,data);
      }
      else if(data<node.data){
      node.left = add(node.left,data);
      }
      else{
      //nothing to do agar pehle se data hai toh
      }
      
      return node;
    }
    
    public static int max(Node node){
    if(node.right!=null){
      return max(node.right);
    }
    else{
    return node.data;
    }
    }
    
    public static Node remove(Node node,int data){
    if(node==null){
    return null;
    }
       if(data>node.data){
       node.right = remove(node.right,data);
      }
      else if(data<node.data){
      node.left = remove(node.left,data);
      }
      else{
          if(node.left!=null && node.right!=null){
          int lmax = max(node.left);
          node.data = lmax;
          node.left = remove(node.left,lmax);
          return node;
          }
          else if(node.left!=null){
          return node.left;
          }
          else if(node.right!=null){
          return node.right;
          }
          else{
          return null;
          }
      }
      return node;
    }
    
    public static Node construct(int[] arr,int lo,int hi){
      if(lo>hi){
      return null;
      }
      
      int mid = (lo+hi)/2;
      
      int data = arr[mid];
      Node lc = construct(arr,lo,mid-1);
      Node rc = construct(arr,mid+1,hi);
      
      Node node = new Node(data,lc,rc);
      return node;
    }
   
   public static void display(Node node){
   if(node==null){
   return;
   }
   String str = "";
   
   str+=node.left==null?".":node.left.data;
   str+=" <-- "+node.data+" --> ";
   str+=node.right==null?".":node.right.data;
   
   display(node.left);
   display(node.right);
   }
    
    public static void main(String[] args){
    int[] arr = {12,25,30,37,40,50,62,75,80,87,93};
    
    Node root = construct(arr,0,arr.length-1);
    display(root);
   
    
    }
    
    }
     /*
30 <-- 50 --> 80
12 <-- 30 --> 37
. <-- 12 --> 25
. <-- 25 --> .
. <-- 37 --> 40
. <-- 40 --> .
62 <-- 80 --> 87
. <-- 62 --> 75
. <-- 75 --> .
. <-- 87 --> 93
. <-- 93 --> .
     */
    
        
