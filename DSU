------------------------------------------> Ye hai Naive DSU without any Optimisations ----------------------------------------------------------------------------->
public class DSU {
   int[] parent;
     public void main(String[] args){
        int[][]relations = {{1,3},{2,5},{6,7},{2,4},{1,6},{8,9},{8,10}};
        int n = 10;
        
        parent = new int[n+1];
        
        //Initially parent Array
        
        for(int i=0;i<parent.length;i++){
            parent[i] = i;    
        /*toh ye bata raha hai ki sab apne set mein abhi parent bane baithe hai khud ke jaise 1 ka parent 1 and 
        respectively sab apne set mein parent bane baithe hai */
        
        }
        
        for(int i=0;i<relations.length;i++){
            int u = relations[i][0];
            int v = relations[i][1];
            
            union(u,v);
        }
        
        int groups = 0;
        
        for(int i=1;i<parent.length;i++){
            if(parent[i]==i)
            groups++;
        }
        
        System.out.println(groups);
        
     }
     
     public void union(int u,int v){
         int slu = find(u);  //Ye find function madad karta hai set leader nikalne mein
         int slv = find(v);
         
         if(slu!=slv){
             parent[slu] = slv;
         }
     }
     
     public int find(int x){
         if(parent[x]==x){
             return x;
         }
         int sl = find(parent[x]);
         return sl;
     }
}





<-------------------------> Ye toh Optimised DSU hai Rank and Path compression ko Lagakar <--------------------------------------------------------------------------->
public class DSU {
    public static void main(String[]args) {
        int[][]relations = {{1,3},{2,5},{6,7},{2,4},{1,6},{8,9},{8,10}};
        int n = 10;
        int[]parent = new int[n+1];
        int[]rank = new int[n+1];

        for(int i=1; i <= n;i++) {
            parent[i] = i;
            rank[i] = 0;
        }

        for(int i=0; i < relations.length;i++) {
            int u = relations[i][0];
            int v = relations[i][1];

            union(parent,rank,u,v);
        }


        //number of groups
        int groups = 0;

        for(int i=1; i <= n;i++) {
            if(parent[i] == i) {
                groups++;
            }
        }

        System.out.println(groups);
    }


    public static int find(int x,int[]parent) {
        if(parent[x] == x) {
            return x;
        }

        int sl = find(parent[x],parent);
        parent[x] = sl;   //path compression i.e. set leader ko hi parent bana lo jissey find O(1) mein chalne lag jaaye
        return sl;
    }

    public static void union(int[]parent,int[]rank,int u,int v) {
        int slu = find(u,parent);
        int slv = find(v,parent);

        if(slu != slv) {    //Idhar Union by Rank laga hai i.e. union bhi O(1) mein ho jaayega
            int rslu = rank[slu];
            int rslv = rank[slv];

            if(rslu < rslv) {
                parent[slu] = slv;
            }
            else if(rslv < rslu) {
                parent[slv] = slu;
            }
            else {
                parent[slu] = slv;
                rank[slv]++;
            }
        }
    }
}


Baaki graphs waali copy mein notes likhe hai toh samaj aa jayege kaise union by rank lagana hai

//So the answer would be 3 i.e. 3 groups
---------------            
|     1 3     |
|     6 7     |
---------------

---------------
|     2 5     |
|      4      |
---------------

---------------
|     8 9     |
|      10     |
---------------
