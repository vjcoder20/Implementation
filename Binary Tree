 BINARY TREE VIEW
                   50
                 /    \
                /       \
              95         75
             / \        /  \
            /   \     /     \
           12   47   62      67
               /      \
              /         \
             30           70
             
             Pre-Order: 50 95 12 null null 47 30 null null null 75 62 null 70 null null 77 null null (Rule: root->left->right)
 
 public class BinaryTreeConstructor{
 public static class Node{
        int data;                                                               
        Node left;
        Node right;
        
        Node(int data,Node left,Node right){
            this.data = data;
            this.left = left;
            this.right = right;
        }
    }
    
    public static class Pair{
      Node node;
      int state;
      
      Pair(Node node,int state){
        this.node = node;
        this.state = state;
      }
   }
   
   public static void display(Node node){
   if(node==null){
   return;
   }
   String str = "";
   
   str+=node.left==null?".":node.left.data;
   str+=" <-- "+node.data+" --> ";
   str+=node.right==null?".":node.right.data;
   
   display(node.left);
   display(node.right);
   }
    
    public static void main(String[] args){
    Integer[] arr = {50,95,12,null,null,47,30,null,null,null,75,62,null,70,null,null,77,null,null};
    
    Node root = new Node(arr[0],null,null);
    Pair rootPair = new Node(root,1);
    Stack<Pair> st = new Stack<>();
    st.push(rootPair);
    
    int idx = 0;
    
    while(st.size() > 0){
      Pair top = st.peek();
      if(top.state==1){
        idx++;
        if(arr[idx]!=null){
        top.node.left = new Node(arr[idx],null,null);
        Pair lp = new Pair(top.node.left,1);
        st.push(lp);
        }else{
         top.node.left = null;
        }
        top.state++;
      }
      
      else if(top.state==2){
         idx++;
        if(arr[idx]!=null){
        top.node.right = new Node(arr[idx],null,null);
        Pair rp = new Pair(top.node.right,1);
        st.push(rp);
        }else{
         top.node.right = null;
        }
        top.state++;
      }
      
      else{
      st.pop();
      }
    }
    
    }
    
    }
    /*
 Output of the Above Code [Here .represents null]
95 <-- 50 --> 75
12 <-- 95 --> 47
 .  <-- 12 -->  . 
30 <-- 47 -->  . 
 .  <-- 30 -->  . 
62 <-- 75 --> 77
 .  <-- 62 --> 70
 .  <-- 70 -->  . 
 .  <-- 77 -->  . 
    */
   
